Sorting in Java
  - Arrays
    - Primitive - dual pivot Quick sort --Stability doesn't matter --> fast then collections
    - Non-primitive - based on merge sort and adaptation of timSort --> stability matters --> slightly slow then dual pivot quick sort
  - Collections
    - Non-primitive - based on merge sort and adaption of timSort --> stability matters.
 
 Quick sort - unstable, Merge sort - stable
 
 
 Arrays
  - Methods
    Arrays.sort(arr); //sort in natural order
    Arrays.sort(arr,start, end); --> [start, end)
    Arrays.sort(arr, Collections.reverseOrder()); //sort in non-increasing order
    
 Collections
  - Methods
    Colletions.sort(list) --> accepts on linkinterface --> ArrayList, LinkedList, Vector
    Collections.sort(list, Collections.reverseOrder())
   
   
   
Stable & Unstable algo
Stable - for two same value of comparing field in object it maintain the order of appearing in given inpu

Stable Algo : Bubble sort, Insertion sort, Merge sort (IBM)
Non stable : Selection sort, Quick Sort, heap sort (SHQ)


BUBBLE SORT
Comparision based sorting
Passes require to sort n elements : n-1
Complexity : O(n^2) for naive approach, O(N) with efficient approach iff array is sorted
Inplace approach

SELECTION SORT
Comparision based sorting
Time Complexity : O(N^2)
Does less memory writes as compared to Quick Sort, Merge Sort, Insertion Sort etc. But cycle sort is optimal in terms of memory writes.
   Memory writes are costly operation in some cases like EPROM --> in this if we do more memory writes life of memory gets decreased
   ex 2 : Writing data to hardisk
Basic idea for heapSort --> meaning heap sort uses selection sort idea by using Heap data structure
Not stable
Inplace appraoch 
