Sorting in Java
  - Arrays
    - Primitive - dual pivot Quick sort --Stability doesn't matter --> fast then collections
    - Non-primitive - based on merge sort and adaptation of timSort --> stability matters --> slightly slow then dual pivot quick sort
  - Collections
    - Non-primitive - based on merge sort and adaption of timSort --> stability matters.
 
 Quick sort - unstable, Merge sort - stable
 
 
 Arrays
  - Methods
    Arrays.sort(arr); //sort in natural order
    Arrays.sort(arr,start, end); --> [start, end)
    Arrays.sort(arr, Collections.reverseOrder()); //sort in non-increasing order
    
 Collections
  - Methods
    Colletions.sort(list) --> accepts on linkinterface --> ArrayList, LinkedList, Vector
    Collections.sort(list, Collections.reverseOrder())
   
   
   
Stable & Unstable algo
Stable - for two same value of comparing field in object it maintain the order of appearing in given inpu

Stable Algo : Bubble sort, Insertion sort, Merge sort (IBM)
Non stable : Selection sort, Quick Sort, heap sort (SHQ)


BUBBLE SORT
Comparision based sorting
Passes require to sort n elements : n-1
Complexity : O(n^2) for naive approach, O(N) with efficient approach iff array is sorted
Inplace approach

SELECTION SORT
Comparision based sorting
Time Complexity : O(N^2)
Does less memory writes as compared to Quick Sort, Merge Sort, Insertion Sort etc. But cycle sort is optimal in terms of memory writes.
   Memory writes are costly operation in some cases like EPROM --> in this if we do more memory writes life of memory gets decreased
   ex 2 : Writing data to hardisk
Basic idea for heapSort --> meaning heap sort uses selection sort idea by using Heap data structure
Not stable
Inplace appraoch 


INSERTION SORT:
O(N^2) Worst case --> when ur array is reversed sorted
Inplace and stable
Used in practice for small arrays
  -by hybrid algo 
    TimSort(Merge and insertion sort --> it switches to insertion sort when ur array size becomes smaller)
    IntroSort --> hybrid sorting algo --> uses quick sort, heap sort and insertion sort --> it switches to insertion sort when ur array size becomes smaller)
O(N) best case -->when ur array is sorted


MERGE SORT
Divide and Conquer Algo
Stable algorithm
Θ(nLogN) time and O(N) aux space -> Not in place in normal/typical impl
  but there are variations for example block sort that works in Θ(nLogN) time and in place
well suited for external sorting --> bring in part of inputs in RAM then sort then merge the sorted parts
It is outperforms for arrays, for arrays quickSort works better than merge sort, but it is widely used.


QUICK SORT
  LOMUTO's PARTITION
    Time Complexity : O(N) and one traversal of array
    This algorithm works by assuming the pivot element as the last element.If any other element is given as pivot element then swap it
    first with the last element.
  
  HOARE's PARTITION
    Time Complexity : O(N) and one traversal of array but works better than Lomuto's partition
    All the elements less than or equal to pivot are on left side, and all the elements greater than or equal to pivot are on right side
    In this pivot is not coming to its original position that is where LOMUTO's partition is slightly better.
    
    But in practical Hoare's partition takes less num of comparisions and works better than Lomuto's partition
  
  
  About Quick Sort
    - Divide and Conquer Algorithm
    - Worst Case complexity : O(N^2)
    - Despite O(n^2) worst case, it is considered faster, because of the following
      - In place approach
        Meaning it doesn't require extra data structure/auxiliary space but it still requires recursion call stack
      - Cache friendly - Since it's inplace all the elements are in main data structure
      - Average time complexity : O(nLogN)
      - Tail Recursion - Meaning recursive function done as a last thing, such function can be removed and write in form of loops, many compilers in java do this automatically(In python, programmer has to do this)
    - Partition is key function(Naive, Lomuto, Hoare)
        - Naive solution --> stable, three traversal
        - Others are inplace , faster but not stable
